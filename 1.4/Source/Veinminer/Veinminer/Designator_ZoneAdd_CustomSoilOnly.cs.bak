using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Verse;

namespace RimWorld
{
    // Token: 0x02000002 RID: 2
    public class Designator_ZoneAdd_CustomSoilOnly : Designator_ZoneAdd
    {
        // Token: 0x17000001 RID: 1
        // (get) Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250
        protected override string NewZoneLabel
        {
            get
            {
                return "CustomSoilOnlyZone".Translate(GenText.CapitalizeFirst(this.curDef.label));
            }
        }

        // Token: 0x06000002 RID: 2 RVA: 0x00002078 File Offset: 0x00000278
        public Designator_ZoneAdd_CustomSoilOnly()
        {
            this.zoneTypeToPlace = typeof(Zone_Growing);
            this.defaultLabel = "CustomSoilOnlyZone".Translate(GenText.CapitalizeFirst(this.curDef.label));
            this.defaultDesc = "DesignatorCustomSoilOnlyDesc".Translate(GenText.CapitalizeFirst(this.curDef.label));
            this.icon = ContentFinder<Texture2D>.Get("UI/Designators/ZoneCreate_Growing", true);
            this.tutorTag = "";
        }

        // Token: 0x06000003 RID: 3 RVA: 0x00002114 File Offset: 0x00000314
        public override AcceptanceReport CanDesignateCell(IntVec3 c)
        {
            if (!base.CanDesignateCell(c).Accepted)
            {
                return false;
            }
            if (base.Map.terrainGrid.TerrainAt(c) != this.curDef)
            {
                return false;
            }
            return true;
        }

        // Token: 0x06000004 RID: 4 RVA: 0x0000215F File Offset: 0x0000035F
        protected override Zone MakeNewZone()
        {
            PlayerKnowledgeDatabase.KnowledgeDemonstrated(ConceptDefOf.GrowingFood, (RimWorld.KnowledgeAmount)6);
            return new Zone_Growing(Find.CurrentMap.zoneManager);
        }

        // Token: 0x06000005 RID: 5 RVA: 0x0000217C File Offset: 0x0000037C
        public override void ProcessInput(Event ev)
        {
            if (!base.CheckCanInteract())
            {
                return;
            }
            List<FloatMenuOption> list = new List<FloatMenuOption>();
            using (IEnumerator<TerrainDef> enumerator = (from floor in DefDatabase<TerrainDef>.AllDefs
                                                         where (double)floor.fertility >= 0.4
                                                         select floor into x
                                                         orderby x.fertility descending
                                                         select x).GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    TerrainDef current = enumerator.Current;
                    string text = GenText.CapitalizeFirst(current.label);
                    list.Add(new FloatMenuOption(text, delegate ()
                    {
                        this.ProcessInput(ev);
                        Find.DesignatorManager.Select(this);
                        this.curDef = TerrainDef.Named(current.defName);
                    }, (Verse.MenuOptionPriority)4, null, null, 0f, null, null));
                }
            }
            if (list.Count != 0)
            {
                FloatMenu floatMenu = new FloatMenu(list);
                floatMenu.vanishIfMouseDistant = true;
                Find.WindowStack.Add(floatMenu);
                Find.DesignatorManager.Select(this);
            }
        }

        // Token: 0x04000001 RID: 1
        private TerrainDef curDef = TerrainDefOf.Soil;
    }
}
